!function() {
    "use strict";
    
    // Error handling
    function logError(e) {
        try {
            if (typeof console === "undefined") return;
            console.error ? console.error(e) : console.log(e);
        } catch (err) {
            // Silently catch any logging issues
        }
    }

    // Function to safely return href attribute
    function getSafeHref(e) {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = '<a href="' + e.replace(/"/g, "&quot;") + '"></a>';
        return tempDiv.childNodes[0].getAttribute("href") || "";
    }

    // Helper to parse a substring and convert it to an integer (hexadecimal)
    function parseHex(e, t) {
        var hexValue = e.substr(t, 2);
        return parseInt(hexValue, 16);
    }

    // Decoding function
    function decodeEmail(encodedString, startIdx) {
        var decoded = "";
        var xorKey = parseHex(encodedString, startIdx);
        for (var i = startIdx + 2; i < encodedString.length; i += 2) {
            var charCode = parseHex(encodedString, i) ^ xorKey;
            decoded += String.fromCharCode(charCode);
        }
        try {
            decoded = decodeURIComponent(escape(decoded)); // Escape is deprecated, consider alternatives
        } catch (err) {
            logError(err);
        }
        return getSafeHref(decoded);
    }

    // Function to process all <a> elements
    function processLinks(context) {
        var links = context.querySelectorAll("a");
        for (var i = 0; i < links.length; i++) {
            try {
                var link = links[i];
                var emailIdx = link.href.indexOf(cdnPath);
                if (emailIdx > -1) {
                    link.href = "mailto:" + decodeEmail(link.href, emailIdx + cdnPath.length);
                }
            } catch (err) {
                logError(err);
            }
        }
    }

    // Function to process elements with email protection
    function processProtectedEmails(context) {
        var elements = context.querySelectorAll(emailSelector);
        for (var i = 0; i < elements.length; i++) {
            try {
                var elem = elements[i];
                var parent = elem.parentNode;
                var encodedEmail = elem.getAttribute(emailAttribute);
                if (encodedEmail) {
                    var decodedEmail = decodeEmail(encodedEmail, 0);
                    var textNode = document.createTextNode(decodedEmail);
                    parent.replaceChild(textNode, elem);
                }
            } catch (err) {
                logError(err);
            }
        }
    }

    // Function to process all <template> elements
    function processTemplates(context) {
        var templates = context.querySelectorAll("template");
        for (var i = 0; i < templates.length; i++) {
            try {
                processDOM(templates[i].content);
            } catch (err) {
                logError(err);
            }
        }
    }

    // Main function to process the document or any context
    function processDOM(context) {
        try {
            processLinks(context);
            processProtectedEmails(context);
            processTemplates(context);
        } catch (err) {
            logError(err);
        }
    }

    // Constants
    var cdnPath = "/cdn-cgi/l/email-protection#",
        emailSelector = ".__cf_email__",
        emailAttribute = "data-cfemail";
    
    // Start processing the document
    processDOM(document);

    // Self-removal of the script tag
    (function() {
        var currentScript = document.currentScript || document.scripts[document.scripts.length - 1];
        if (currentScript && currentScript.parentNode) {
            currentScript.parentNode.removeChild(currentScript);
        }
    })();
    
}();