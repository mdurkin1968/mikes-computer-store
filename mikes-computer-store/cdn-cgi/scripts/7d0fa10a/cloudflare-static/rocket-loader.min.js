(function() {
    "use strict";

    // Generate a unique marker for use in the document
    function generateMarker() {
        return "cf-marker-" + Math.random().toString().slice(2);
    }

    // Log messages with a specific prefix
    function log() {
        var args = Array.prototype.slice.call(arguments);
        var logFunction = console.warn || console.log;
        logFunction.apply(console, ["[ROCKET LOADER] "].concat(args));
    }

    // Insert element `e` into parent node `n` at position `e`
    function insertBefore(t, e) {
        var parent = e.parentNode;
        if (parent) {
            insert(t, parent, e);
        }
    }

    // Append element `e` as a child of `t`
    function appendChild(t, e) {
        insert(t, e, e.childNodes[0]);
    }

    // Remove element `t` from its parent
    function removeElement(t) {
        var parent = t.parentNode;
        if (parent) {
            parent.removeChild(t);
        }
    }

    // Get the attribute value based on namespace
    function getAttribute(t) {
        var attrName = t.namespaceURI === SVG_NAMESPACE ? "xlink:href" : "src";
        return t.getAttribute(attrName);
    }

    // Check if the script type is executable
    function isExecutable(t, prefix) {
        var type = t.type.substr(prefix.length);
        return !(type && !EXE_TYPES[type.trim()]) &&
            ((!IS_MODULE || !t.hasAttribute("nomodule")) && (!(!IS_MODULE && type === "module")));
    }

    // Check if the script is executable
    function checkExecutable(t) {
        return isExecutable(t, "");
    }

    // Create a function that wraps another function `f` with `e`
    function wrapFunction(t, e) {
        return function(n) {
            if (e()) {
                return t ? t.call(this, n) : null;
            }
        };
    }

    // Set up event handlers for `onload` and `onerror`
    function setUpHandlers(t, e) {
        t.onload = wrapFunction(t.onload, e);
        t.onerror = wrapFunction(t.onerror, e);
    }

    // Create a new script element from an existing one
    function createScriptFromElement(t) {
        var newScript = document.createElementNS(t.namespaceURI, "script");
        newScript.async = t.hasAttribute("async");
        newScript.textContent = t.textContent;
        for (var i = 0; i < t.attributes.length; i++) {
            var attr = t.attributes[i];
            try {
                if (attr.namespaceURI) {
                    newScript.setAttributeNS(attr.namespaceURI, attr.name, attr.value);
                } else {
                    newScript.setAttribute(attr.name, attr.value);
                }
            } catch (e) {}
        }
        return newScript;
    }

    // Create and dispatch a custom event
    function dispatchEvent(t, e) {
        var event = new CUSTOM_EVENT(e);
        t.dispatchEvent(event);
    }

    // Remove element and its parent if necessary
    function removeElementAndParent(e) {
        var isSvg = e.namespaceURI === SVG_NAMESPACE;
        var marker = generateMarker();
        e.setAttribute(marker, "");
        var content = isSvg ? "<svg>" + e.outerHTML + "</svg>" : e.outerHTML;
        DOCUMENT_WRITE.call(document, content);
        var createdElement = document.querySelector("[" + marker + "]");
        if (createdElement) {
            createdElement.removeAttribute(marker);
            var parent = isSvg && createdElement.parentNode;
            if (parent) {
                removeElement(parent);
            }
        }
        return createdElement;
    }

    // Get the function to handle events
    function getHandlerFunction(t) {
        if (t && "handleEvent" in t) {
            var handler = t.handleEvent;
            return typeof handler === "function" ? handler.bind(t) : handler;
        }
        return t;
    }

    // Insert elements `t` into parent `e` at position `n`
    function insert(t, e, n) {
        var insertionFunction = n ? function(t) { return e.insertBefore(t, n); } : function(t) { return e.appendChild(t); };
        Array.prototype.slice.call(t).forEach(insertionFunction);
    }

    // Check if the browser is Chrome
    function isChrome() {
        return /chrome/i.test(navigator.userAgent) && /google/i.test(navigator.vendor);
    }

    // Create a subclass of `t` that extends `e`
    function extendClass(t, e) {
        function TempConstructor() { this.constructor = t; }
        Object.setPrototypeOf(t, e);
        t.prototype = e === null ? Object.create(e) : (TempConstructor.prototype = e.prototype, new TempConstructor());
    }

    // Get the appropriate event names based on the type of object `t`
    function getEventNames(t) {
        if (t instanceof Window) return ["load"];
        if (t instanceof Document) return ["DOMContentLoaded", "readystatechange"];
        return [];
    }

    // Get settings from the element attribute
    function getSettings(t) {
        var attr = t.getAttribute(SETTINGS_ATTR);
        if (!attr) return null;
        var parts = attr.split(SEPARATOR);
        return {
            nonce: parts[0],
            handlerPrefixLength: +parts[1],
            bailout: !t.hasAttribute("defer")
        };
    }

    // Remove settings and attributes from elements
    function removeSettings(t) {
        var attrName = MODIFIED_ATTR + t.nonce;
        Array.prototype.forEach.call(document.querySelectorAll("[" + attrName + "]"), function(el) {
            el.removeAttribute(attrName);
            Array.prototype.forEach.call(el.attributes, function(attr) {
                if (/^on/.test(attr.name) && typeof el[attr.name] !== "function") {
                    el.setAttribute(attr.name, attr.value.substring(t.handlerPrefixLength));
                }
            });
        });
    }

    // Initialize a promise for callback execution
    function initializePromise() {
        var t = window;
        if (typeof Promise !== 'undefined') {
            t.__cfQR = {
                done: new Promise(function(resolve) { CALLBACK = resolve; })
            };
        }
    }

    // Handle different types of script operations
    function handleScripts(t) {
        var scriptHandler = new SCRIPT_HANDLER(t);
        var docWriteSimulator = new DOCUMENT_WRITE_SIMULATOR(scriptHandler);
        scriptHandler.harvestScriptsInDocument();
        new SCRIPT_RUNNER(scriptHandler, {
            nonce: t,
            blocking: true,
            docWriteSimulator: docWriteSimulator,
            callback: function() {}
        }).run();
    }

    // Run script operations and manage load progress
    function runScripts(t) {
        var scriptHandler = new SCRIPT_HANDLER(t);
        var docWriteSimulator = new DOCUMENT_WRITE_SIMULATOR(scriptHandler);
        scriptHandler.harvestScriptsInDocument();
        var scriptRunner = new SCRIPT_RUNNER(scriptHandler, {
            nonce: t,
            blocking: false,
            docWriteSimulator: docWriteSimulator,
            callback: function() {
                window.__cfRLUnblockHandlers = true;
                scriptRunner.removePreloadHints();
                POST_PROCESSING(t);
            }
        });
        scriptRunner.insertPreloadHints();
        LOAD_PROGRESS.runOnLoad(function() {
            scriptRunner.run();
        });
    }

    // Process deferred scripts
    function processDeferredScripts(t) {
        var deferScriptHandler = new DEFER_SCRIPT_HANDLER(t);
        LOAD_PROGRESS.simulateStateBeforeDeferScriptsActivation();
        deferScriptHandler.harvestDeferScriptsInDocument();
        new SCRIPT_RUNNER(deferScriptHandler, {
            nonce: t,
            blocking: false,
            callback: function() {
                LOAD_PROGRESS.simulateStateAfterDeferScriptsActivation();
                CALLBACK && CALLBACK();
            }
        }).run();
    }

    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    var EXE_TYPES = {
        "application/ecmascript": true,
        "application/javascript": true,
        "application/x-ecmascript": true,
        "application/x-javascript": true,
        "text/ecmascript": true,
        "text/javascript": true,
        "text/javascript1.0": true,
        "text/javascript1.1": true,
        "text/javascript1.2": true,
        "text/javascript1.3": true,
        "text/javascript1.4": true,
        "text/javascript1.5": true,
        "text/jscript": true,
        "text/livescript": true,
        "text/x-ecmascript": true,
        "text/x-javascript": true,
        "module": true
    };
    var IS_MODULE = document.createElement("script").noModule !== undefined;
    var CUSTOM_EVENT = (function() {
        var t = window;
        return t.__rocketLoaderEventCtor || Object.defineProperty(t, "__rocketLoaderEventCtor", { value: Event }), t.__rocketLoaderEventCtor;
    })();
    var DOCUMENT_WRITE = document.write;
    var WRITE_LINE = document.writeln;
    var OBJECT_SET_PROTOTYPE = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t, e) { t.__proto__ = e; } || function(t, e) { for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]); };
    var SETTINGS_ATTR = "data-cf-settings";
    var SEPARATOR = "|";
    var MODIFIED_ATTR = "data-cf-modified-";
    var CALLBACK;
    var SCRIPT_HANDLER = (function() {
        function ScriptHandler(t) {
            this.nonce = t;
            this.items = [];
        }
        Object.defineProperty(ScriptHandler.prototype, "hasItems", {
            get: function() { return this.items.length > 0; },
            enumerable: true,
            configurable: true
        });
        ScriptHandler.prototype.pop = function() { return this.items.pop(); };
        ScriptHandler.prototype.forEach = function(callback) { this.items.forEach(function(item) { return callback(item.script); }); };
        ScriptHandler.prototype.harvestScripts = function(t, e) {
            var self = this;
            var filter = e.filter;
            var mutate = e.mutate;
            Array.prototype.slice.call(t.querySelectorAll("script")).filter(filter).reverse().forEach(function(script) {
                mutate(script);
                self.pushScriptOnStack(script);
            });
        };
        ScriptHandler.prototype.pushScriptOnStack = function(script) {
            var parent = script.parentNode;
            var placeholder = this.createPlaceholder(script);
            var isExternal = !!getAttribute(script);
            parent.replaceChild(placeholder, script);
            this.items.push({
                script: script,
                placeholder: placeholder,
                external: isExternal,
                async: isExternal && script.hasAttribute("async"),
                executable: checkExecutable(script)
            });
        };
        ScriptHandler.prototype.hasNonce = function(script) {
            return (script.getAttribute("type") || "").indexOf(this.nonce) === 0;
        };
        ScriptHandler.prototype.removeNonce = function(script) {
            script.type = script.type.substr(this.nonce.length);
        };
        ScriptHandler.prototype.makeNonExecutable = function(script) {
            script.type = this.nonce + script.type;
        };
        ScriptHandler.prototype.isPendingDeferScript = function(script) {
            return script.hasAttribute("defer") || script.type === this.nonce + "module" && !script.hasAttribute("async");
        };
        return ScriptHandler;
    })();
    var DEFER_SCRIPT_HANDLER = (function() {
        function DeferScriptHandler(t) {
            return ScriptHandler.apply(this, arguments) || this;
        }
        extendClass(DeferScriptHandler, ScriptHandler);
        DeferScriptHandler.prototype.harvestDeferScriptsInDocument = function() {
            var self = this;
            this.harvestScripts(document, {
                filter: function(script) { return self.hasNonce(script) && self.isPendingDeferScript(script); },
                mutate: function(script) { return self.removeNonce(script); }
            });
        };
        DeferScriptHandler.prototype.createPlaceholder = function(script) {
            var newScript = createScriptFromElement(script);
            this.makeNonExecutable(newScript);
            return newScript;
        };
        return DeferScriptHandler;
    })();
    var DOCUMENT_WRITE_SIMULATOR = (function() {
        function DocumentWriteSimulator(scriptStack) {
            this.scriptStack = scriptStack;
        }
        DocumentWriteSimulator.prototype.enable = function(marker) {
            var self = this;
            this.insertionPointMarker = marker;
            this.buffer = "";
            document.write = function() {
                var args = Array.prototype.slice.call(arguments);
                return self.write(args, false);
            };
            document.writeln = function() {
                var args = Array.prototype.slice.call(arguments);
                return self.write(args, true);
            };
        };
        DocumentWriteSimulator.prototype.flushWrittenContentAndDisable = function() {
            document.write = DOCUMENT_WRITE;
            document.writeln = WRITE_LINE;
            if (this.buffer.length) {
                if (document.contains(this.insertionPointMarker)) {
                    if (this.insertionPointMarker.parentNode === document.head) {
                        this.insertContentInHead();
                    } else {
                        this.insertContentInBody();
                    }
                } else {
                    log("Insertion point marker for document.write was detached from document:", "Markup will not be inserted");
                }
            }
        };
        DocumentWriteSimulator.prototype.insertContentInHead = function() {
            var parser = new DOMParser();
            var content = "<!DOCTYPE html><head>" + this.buffer + "</head>";
            var doc = parser.parseFromString(content, "text/html");
            this.scriptStack.harvestScriptsAfterDocWrite(doc);
            insertBefore(doc.head.childNodes, this.insertionPointMarker);
            if (doc.body.childNodes.length) {
                var nodes = Array.prototype.slice.call(doc.body.childNodes);
                var sibling = this.insertionPointMarker.nextSibling;
                while (sibling) {
                    nodes.push(sibling);
                    sibling = sibling.nextSibling;
                }
                if (!document.body) {
                    DOCUMENT_WRITE.call(document, "<body>");
                }
                appendChild(nodes, document.body);
            }
        };
        DocumentWriteSimulator.prototype.insertContentInBody = function() {
            var parentElement = this.insertionPointMarker.parentElement;
            var tempElement = document.createElement(parentElement.tagName);
            tempElement.innerHTML = this.buffer;
            this.scriptStack.harvestScriptsAfterDocWrite(tempElement);
            insertBefore(tempElement.childNodes, this.insertionPointMarker);
        };
        DocumentWriteSimulator.prototype.write = function(t, isWriteln) {
            var currentScript = document.currentScript;
            var writeFunction;
            if (currentScript && getAttribute(currentScript) && currentScript.hasAttribute("async")) {
                writeFunction = isWriteln ? WRITE_LINE : DOCUMENT_WRITE;
            } else {
                writeFunction = isWriteln ? WRITE_LINE : DOCUMENT_WRITE;
            }
            writeFunction.call.apply(writeFunction, [document].concat(t));
            var r;
            this.buffer += t.map(String).join(isWriteln ? "\n" : "");
        };
        return DocumentWriteSimulator;
    })();
    var SCRIPT_RUNNER = (function() {
        function ScriptRunner(scriptStack, settings) {
            this.scriptStack = scriptStack;
            this.settings = settings;
            this.preloadHints = [];
        }
        ScriptRunner.prototype.insertPreloadHints = function() {
            var self = this;
            this.scriptStack.forEach(function(script) {
                if (isExecutable(script, self.settings.nonce)) {
                    var src = getAttribute(script);
                    var hasIntegrity = isChrome() && script.hasAttribute("integrity");
                    if (src && !hasIntegrity) {
                        var preloadLink = document.createElement("link");
                        preloadLink.setAttribute("rel", "preload");
                        preloadLink.setAttribute("as", "script");
                        preloadLink.setAttribute("href", src);
                        if (script.crossOrigin) {
                            preloadLink.setAttribute("crossorigin", script.crossOrigin);
                        }
                        document.head.appendChild(preloadLink);
                        self.preloadHints.push(preloadLink);
                    }
                }
            });
        };
        ScriptRunner.prototype.removePreloadHints = function() {
            this.preloadHints.forEach(function(link) { removeElement(link); });
        };
        ScriptRunner.prototype.run = function() {
            var self = this;
            while (this.scriptStack.hasItems) {
                var result = (function() {
                    var docWriteSimulator = self.settings.docWriteSimulator;
                    var stackItem = self.scriptStack.pop();
                    if (docWriteSimulator && !stackItem.async) {
                        docWriteSimulator.enable(stackItem.placeholder);
                    }
                    var script = self.activateScript(stackItem);
                    if (script) {
                        if (stackItem.external && stackItem.executable && !stackItem.async) {
                            setUpHandlers(script, function() {
                                self.finalizeActivation(stackItem);
                                self.run();
                            });
                            return { value: undefined };
                        } else {
                            self.finalizeActivation(stackItem);
                        }
                    } else {
                        if (docWriteSimulator) {
                            docWriteSimulator.flushWrittenContentAndDisable();
                        }
                        return "continue";
                    }
                })();
                if (typeof result === "object") {
                    return result.value;
                }
            }
            if (!this.scriptStack.hasItems) {
                this.settings.callback();
            }
        };
        ScriptRunner.prototype.finalizeActivation = function(item) {
            if (this.settings.docWriteSimulator && !item.async) {
                this.settings.docWriteSimulator.flushWrittenContentAndDisable();
            }
            LOAD_PROGRESS.updateInlineHandlers();
            removeElement(item.placeholder);
        };
        ScriptRunner.prototype.activateScript = function(item) {
            var script = item.script;
            var placeholder = item.placeholder;
            var isExternal = item.external;
            var isAsync = item.async;
            var parent = placeholder.parentNode;
            if (!document.contains(placeholder)) {
                log("Placeholder for script \n" + script.outerHTML + "\n was detached from document.", "Script will not be executed.");
                return null;
            }
            var newScript = this.settings.blocking && isExternal && !isAsync ? removeElementAndParent(script) : createScriptFromElement(script);
            if (newScript) {
                parent.insertBefore(newScript, placeholder);
                return newScript;
            } else {
                log("Failed to create activatable copy of script \n" + script.outerHTML + "\n", "Script will not be executed.");
                return null;
            }
        };
        return ScriptRunner;
    })();
    var LOAD_PROGRESS = (function() {
        function LoadProgress() {
            var self = this;
            this.simulatedReadyState = "loading";
            this.bypassEventsInProxies = false;
            this.nativeWindowAddEventListener = window.addEventListener;
            try {
                Object.defineProperty(document, "readyState", {
                    get: function() { return self.simulatedReadyState; }
                });
            } catch (error) {
                // Handle error
            }
            this.setupEventListenerProxy();
            this.updateInlineHandlers();
        }
        LoadProgress.prototype.runOnLoad = function(callback) {
            var self = this;
            this.nativeWindowAddEventListener.call(window, "load", function(event) {
                if (!self.bypassEventsInProxies) {
                    callback(event);
                }
            });
        };
        LoadProgress.prototype.updateInlineHandlers = function() {
            this.proxyInlineHandler(document, "onreadystatechange");
            this.proxyInlineHandler(window, "onload");
            if (document.body) {
                this.proxyInlineHandler(document.body, "onload");
            }
        };
        LoadProgress.prototype.simulateStateBeforeDeferScriptsActivation = function() {
            this.bypassEventsInProxies = true;
            this.simulatedReadyState = "interactive";
            dispatchEvent(document, "readystatechange");
            this.bypassEventsInProxies = false;
        };
        LoadProgress.prototype.simulateStateAfterDeferScriptsActivation = function() {
            var self = this;
            this.bypassEventsInProxies = true;
            dispatchEvent(document, "DOMContentLoaded");
            this.simulatedReadyState = "complete";
            dispatchEvent(document, "readystatechange");
            dispatchEvent(window, "load");
            this.bypassEventsInProxies = false;
            window.setTimeout(function() {
                self.bypassEventsInProxies = true;
            }, 0);
        };
        LoadProgress.prototype.setupEventListenerProxy = function() {
            var self = this;
            (typeof EventTarget !== "undefined" ? [EventTarget.prototype] : [Node.prototype, Window.prototype]).forEach(function(target) {
                self.patchEventTargetMethods(target);
            });
        };
        LoadProgress.prototype.patchEventTargetMethods = function(target) {
            var self = this;
            var nativeAddEventListener = target.addEventListener;
            var nativeRemoveEventListener = target.removeEventListener;
            target.addEventListener = function(type, listener) {
                var args = Array.prototype.slice.call(arguments, 2);
                var handler = listener && listener.__rocketLoaderProxiedHandler;
                if (!handler) {
                    var proxiedHandler = createProxiedHandler(listener);
                    handler = proxiedHandler;
                    if (typeof proxiedHandler === "function") {
                        Object.defineProperty(listener, "__rocketLoaderProxiedHandler", {
                            value: handler
                        });
                    }
                }
                nativeAddEventListener.call(this, type, handler, ...args);
            };
            target.removeEventListener = function(type, listener) {
                var args = Array.prototype.slice.call(arguments, 2);
                var handler = listener && listener.__rocketLoaderProxiedHandler || listener;
                nativeRemoveEventListener.call(this, type, handler, ...args);
            };
        };
        LoadProgress.prototype.proxyInlineHandler = function(target, event) {
            try {
                var originalHandler = target[event];
                if (originalHandler && !originalHandler.__rocketLoaderInlineHandlerProxy) {
                    target[event] = function(event) {
                        if (!this.bypassEventsInProxies) {
                            originalHandler.call(this, event);
                        }
                    };
                    Object.defineProperty(target[event], "__rocketLoaderInlineHandlerProxy", {
                        value: true
                    });
                }
            } catch (error) {
                log("Encountered an error when accessing " + event + " handler:", error.message);
            }
        };
        return LoadProgress;
    })();
    function initialize() {
        var currentScript = document.currentScript;
        if (currentScript) {
            var settings = parseSettings(currentScript);
            if (settings) {
                removeElement(currentScript);
                handleSettings(settings);
                LOAD_PROGRESS.updateInlineHandlers();
                if (settings.bailout) {
                    executeScript(settings.nonce);
                } else {
                    setupScript(settings.nonce);
                }
            } else {
                log("Activator script doesn't have settings. No scripts will be executed.");
            }
        } else {
            log("Can't obtain activator script. No scripts will be executed.");
        }
    }
    initialize();
})();